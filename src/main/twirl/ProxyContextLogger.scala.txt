package com.tersesystems.logback.context;

import net.logstash.logback.marker.LogstashMarker;
import org.slf4j.Logger;
import org.slf4j.Marker;

/**
 * Proxy logger that includes context.
 */
public class ProxyContextLogger<T extends Marker> implements Logger, ContextAware<T> @ob

    private final Logger logger;
    private final Context<T> context;

    public ProxyContextLogger(Context<T> context, Logger logger) {
        this.context = context;
        this.logger = logger;
    }

    @Override
    public String getName() {
        return logger.getName();
    }

    @Override
    public Context<T> getContext() {
        return this.context;
    }

    @Override
    public String toString() {
        return String.format("ProxyContextLogger(context = %s,logger = %s)", this.context, this.logger);
    }

    @for(level <- Seq(
      Level("trace", "Trace"),
      Level("debug", "Debug"),
      Level("info", "Info"),
      Level("warn", "Warn"),
      Level("error", "Error"),
    )) {
    @Override
    public boolean is@{level.capitalizedName}Enabled() @ob
        return logger.is@{level.capitalizedName}Enabled(context.asMarker());
    @cb

    @Override
    public void @{level.name}(String msg) @ob
        logger.@{level.name}(context.asMarker(), msg);
    @cb

    @Override
    public void @{level.name}(String format, Object arg) @ob
        logger.@{level.name}(context.asMarker(), format, arg);
    @cb

    @Override
    public void @{level.name}(String format, Object arg1, Object arg2) @ob
        logger.@{level.name}(context.asMarker(), format, arg1, arg2);
    @cb

    @Override
    public void @{level.name}(String format, Object... arguments) @ob
         logger.@{level.name}(context.asMarker(), format, arguments);
    @cb

    @Override
    public void @{level.name}(String msg, Throwable t) @ob
         logger.@{level.name}(context.asMarker(), msg, t);
    @cb

    @Override
    public boolean is@{level.capitalizedName}Enabled(Marker marker) @ob
         return logger.is@{level.capitalizedName}Enabled(merge(marker));
    @cb

    @Override
    public void @{level.name}(Marker marker, String msg) @ob
        logger.@{level.name}(merge(marker), msg);
    @cb

    @Override
    public void @{level.name}(Marker marker, String format, Object arg) @ob
       logger.@{level.name}(merge(marker), format, arg);
    @cb

    @Override
    public void @{level.name}(Marker marker, String format, Object arg1, Object arg2) @ob
        logger.@{level.name}(merge(marker), format, arg1, arg2);
    @cb

    @Override
    public void @{level.name}(Marker marker, String format, Object... argArray) @ob
       logger.@{level.name}(merge(marker), format, argArray);
    @cb

    @Override
    public void @{level.name}(Marker marker, String msg, Throwable t) @ob
       logger.@{level.name}(merge(marker), msg, t);
    @cb
    }

    private Marker merge(Marker marker) {
       Marker contextMarker = context.asMarker();
       if (contextMarker instanceof LogstashContext) {
           return ((LogstashMarker) contextMarker).and(marker);
       } else {
          contextMarker.add(marker);
          return contextMarker;
       }
    }
@cb