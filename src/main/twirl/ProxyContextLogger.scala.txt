package com.tersesystems.logback.proxy;

import net.logstash.logback.marker.LogstashMarker;
import org.slf4j.Logger;
import org.slf4j.Marker;

@* "sbt generateSources" autogenerates in target/sources/txt.Results *@
public class ProxyContextLogger implements Logger  @ob

    private final Logger logger;
    private final Context context;

    public ProxyContextLogger(LogstashMarker logstashMarker, Logger logger) {
        this(new LogstashMarkerContext(logstashMarker), logger);
    }

    public ProxyContextLogger(Context context, Logger logger) {
        if (logger instanceof ProxyContextLogger) {
            this.context = context.and(((ProxyContextLogger) logger).context);
        } else {
            this.context = context;
        }
        this.logger = logger;
    }

    @Override
    public String getName() {
        return logger.getName();
    }

    @for(level <- Seq(
      Level("trace", "Trace"),
      Level("debug", "Debug"),
      Level("info", "Info"),
      Level("warn", "Warn"),
      Level("error", "Error"),
    )) {


    @Override
    public boolean is@{level.capitalizedName}Enabled() {
        return logger.is@{level.capitalizedName}Enabled(context.asLogstashMarker());
    }

    @Override
    public void @{level.name}(String msg) {
        logger.@{level.name}(context.asLogstashMarker(), msg);
    }

    @Override
    public void @{level.name}(String format, Object arg) {
        logger.@{level.name}(context.asLogstashMarker(), msg);
    }

    @Override
    public void @{level.name}(String format, Object arg1, Object arg2) {
        logger.@{level.name}(context.asLogstashMarker(), format, arg1, arg2);
    }

    @Override
    public void @{level.name}(String format, Object... arguments) {
         logger.@{level.name}(context.asLogstashMarker(), format, arguments);
    }

    @Override
    public void @{level.name}(String msg, Throwable t) {
         logger.@{level.name}(context.asLogstashMarker(), msg, t);
    }

    @Override
    public boolean is@{level.capitalizedName}Enabled(Marker marker) {
       logger.is@{level.capitalizedName}Enabled(context.asLogstashMarker().and(marker));
    }

    @Override
    public void @{level.name}(Marker marker, String msg) {
       logger.@{level.name}(context.asLogstashMarker().and(marker), msg);
    }

    @Override
    public void @{level.name}(Marker marker, String format, Object arg) {
       logger.@{level.name}(context.asLogstashMarker().and(marker), format, arg);
    }

    @Override
    public void @{level.name}(Marker marker, String format, Object arg1, Object arg2) {
        logger.@{level.name}(context.asLogstashMarker().and(marker), format, arg1, arg2);
    }

    @Override
    public void @{level.name}(Marker marker, String format, Object... argArray) {
       logger.@{level.name}(context.asLogstashMarker().and(marker), msg, format, argArray);
    }

    @Override
    public void @{level.name}(Marker marker, String msg, Throwable t) {
       logger.@{level.name}(context.asLogstashMarker().and(marker), msg, t);
    }
    }
@cb