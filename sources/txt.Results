

    @Override
    public boolean isTraceEnabled() {
        return logger.isTrace();
    }

    @Override
    public void trace(String msg) {
        return logger.trace(msg);
    }

    @Override
    public void trace(String format, Object arg) {
        return logger.trace(format, msg);
    }

    @Override
    public void trace(String format, Object arg1, Object arg2) {
        return logger.trace(format, arg1, arg2);
    }

    @Override
    public void trace(String format, Object... arguments) {
        return logger.trace(format, arguments);
    }

    @Override
    public void trace(String msg, Throwable t) {
        return logger.trace(msg, t);
    }

    @Override
    public boolean isTraceEnabled(Marker marker) {
        return return logger.isTrace(msg, t);
    }

    @Override
    public void trace(Marker marker, String msg) {
        return logger.trace(marker, msg);
    }

    @Override
    public void trace(Marker marker, String format, Object arg) {
        return logger.trace(marker, format, arg);
    }

    @Override
    public void trace(Marker marker, String format, Object arg1, Object arg2) {
        return logger.trace(marker, format, arg1, arg2);
    }

    @Override
    public void trace(Marker marker, String format, Object... argArray) {
        return logger.trace(marker, format, argArray;
    }

    @Override
    public void trace(Marker marker, String msg, Throwable t) {
        return logger.trace(marker, msg, t);
    }



    @Override
    public boolean isDebugEnabled() {
        return logger.isDebug();
    }

    @Override
    public void debug(String msg) {
        return logger.debug(msg);
    }

    @Override
    public void debug(String format, Object arg) {
        return logger.debug(format, msg);
    }

    @Override
    public void debug(String format, Object arg1, Object arg2) {
        return logger.debug(format, arg1, arg2);
    }

    @Override
    public void debug(String format, Object... arguments) {
        return logger.debug(format, arguments);
    }

    @Override
    public void debug(String msg, Throwable t) {
        return logger.debug(msg, t);
    }

    @Override
    public boolean isDebugEnabled(Marker marker) {
        return return logger.isDebug(msg, t);
    }

    @Override
    public void debug(Marker marker, String msg) {
        return logger.debug(marker, msg);
    }

    @Override
    public void debug(Marker marker, String format, Object arg) {
        return logger.debug(marker, format, arg);
    }

    @Override
    public void debug(Marker marker, String format, Object arg1, Object arg2) {
        return logger.debug(marker, format, arg1, arg2);
    }

    @Override
    public void debug(Marker marker, String format, Object... argArray) {
        return logger.debug(marker, format, argArray;
    }

    @Override
    public void debug(Marker marker, String msg, Throwable t) {
        return logger.debug(marker, msg, t);
    }



    @Override
    public boolean isInfoEnabled() {
        return logger.isInfo();
    }

    @Override
    public void info(String msg) {
        return logger.info(msg);
    }

    @Override
    public void info(String format, Object arg) {
        return logger.info(format, msg);
    }

    @Override
    public void info(String format, Object arg1, Object arg2) {
        return logger.info(format, arg1, arg2);
    }

    @Override
    public void info(String format, Object... arguments) {
        return logger.info(format, arguments);
    }

    @Override
    public void info(String msg, Throwable t) {
        return logger.info(msg, t);
    }

    @Override
    public boolean isInfoEnabled(Marker marker) {
        return return logger.isInfo(msg, t);
    }

    @Override
    public void info(Marker marker, String msg) {
        return logger.info(marker, msg);
    }

    @Override
    public void info(Marker marker, String format, Object arg) {
        return logger.info(marker, format, arg);
    }

    @Override
    public void info(Marker marker, String format, Object arg1, Object arg2) {
        return logger.info(marker, format, arg1, arg2);
    }

    @Override
    public void info(Marker marker, String format, Object... argArray) {
        return logger.info(marker, format, argArray;
    }

    @Override
    public void info(Marker marker, String msg, Throwable t) {
        return logger.info(marker, msg, t);
    }



    @Override
    public boolean isWarnEnabled() {
        return logger.isWarn();
    }

    @Override
    public void warn(String msg) {
        return logger.warn(msg);
    }

    @Override
    public void warn(String format, Object arg) {
        return logger.warn(format, msg);
    }

    @Override
    public void warn(String format, Object arg1, Object arg2) {
        return logger.warn(format, arg1, arg2);
    }

    @Override
    public void warn(String format, Object... arguments) {
        return logger.warn(format, arguments);
    }

    @Override
    public void warn(String msg, Throwable t) {
        return logger.warn(msg, t);
    }

    @Override
    public boolean isWarnEnabled(Marker marker) {
        return return logger.isWarn(msg, t);
    }

    @Override
    public void warn(Marker marker, String msg) {
        return logger.warn(marker, msg);
    }

    @Override
    public void warn(Marker marker, String format, Object arg) {
        return logger.warn(marker, format, arg);
    }

    @Override
    public void warn(Marker marker, String format, Object arg1, Object arg2) {
        return logger.warn(marker, format, arg1, arg2);
    }

    @Override
    public void warn(Marker marker, String format, Object... argArray) {
        return logger.warn(marker, format, argArray;
    }

    @Override
    public void warn(Marker marker, String msg, Throwable t) {
        return logger.warn(marker, msg, t);
    }



    @Override
    public boolean isErrorEnabled() {
        return logger.isError();
    }

    @Override
    public void error(String msg) {
        return logger.error(msg);
    }

    @Override
    public void error(String format, Object arg) {
        return logger.error(format, msg);
    }

    @Override
    public void error(String format, Object arg1, Object arg2) {
        return logger.error(format, arg1, arg2);
    }

    @Override
    public void error(String format, Object... arguments) {
        return logger.error(format, arguments);
    }

    @Override
    public void error(String msg, Throwable t) {
        return logger.error(msg, t);
    }

    @Override
    public boolean isErrorEnabled(Marker marker) {
        return return logger.isError(msg, t);
    }

    @Override
    public void error(Marker marker, String msg) {
        return logger.error(marker, msg);
    }

    @Override
    public void error(Marker marker, String format, Object arg) {
        return logger.error(marker, format, arg);
    }

    @Override
    public void error(Marker marker, String format, Object arg1, Object arg2) {
        return logger.error(marker, format, arg1, arg2);
    }

    @Override
    public void error(Marker marker, String format, Object... argArray) {
        return logger.error(marker, format, argArray;
    }

    @Override
    public void error(Marker marker, String msg, Throwable t) {
        return logger.error(marker, msg, t);
    }

